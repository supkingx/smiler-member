server.port=8081
spring.profiles.active=dev
spring.application.name=smiler-member

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/smiler_user?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=123456

# sharding 数据源
# 配置数据源,给数据源起别名
spring.shardingsphere.datasource.names=m0
# 一个实体类对应两张表，覆盖
spring.main.allow-bean-definition-overriding=true

# 数据源配置具体内容
spring.shardingsphere.datasource.m0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m0.url=jdbc:mysql://localhost:3306/smiler_user?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC
spring.shardingsphere.datasource.m0.username=root
spring.shardingsphere.datasource.m0.password=123456
# 连接池初始化时初始化的数据库连接数
spring.shardingsphere.datasource.m0.initialSize=5
# 连接池中的最小空闲连接数，Druid会定时扫描连接池的连接，如果空闲的连接数大于该值，则关闭多余的连接，反之则创建更多的连接以满足最小连接数要求。
spring.shardingsphere.datasource.m0.minIdle=5
# 最大连接数据库连接数,设 0 为没有限制
spring.shardingsphere.datasource.m0.maxActive=20
# 配置获取连接等待超时的时间 单位ms，默认-1，即会一直等待下去
spring.shardingsphere.datasource.m0.maxWait=2000
# 连接不够用时最多让多少个业务线程发生阻塞
spring.shardingsphere.datasource.m0.maxWaitThreadCount=2
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.shardingsphere.datasource.m0.minEvictableIdleTimeMillis=300000
# 测试连接是否可用的SQL语句
spring.shardingsphere.datasource.m0.validationQuery=SELECT 1 FROM DUAL
# testWhileIdle=true 且 testOnBorrow=false 此时判断连接空闲的依据是空闲时间大于timeBetweenEvictionRunsMillis
spring.shardingsphere.datasource.m0.testWhileIdle=true
# 当应用向连接池申请连接时，连接池会判断这条连接是否是可用的。但如果设置成true，则每次获取连接的时候都要到数据库验证连接有效性，这在高并发的时候会造成性能下降，可以将testOnBorrow设成false，testWhileIdle设置成true这样能获得比较好的性能
spring.shardingsphere.datasource.m0.testOnBorrow=false
# 当应用使用完连接，连接池回收连接的时候会判断该连接是否还可用。
spring.shardingsphere.datasource.m0.testOnReturn=false
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒（判断当前连接对象距离上次被使用的时间是否超过规定检查的时间，若超过，则进行检查一次）
spring.shardingsphere.datasource.m0.timeBetweenEvictionRunsMillis=60000
# 游标缓存
spring.shardingsphere.datasource.m0.poolPreparedStatements=true
spring.shardingsphere.datasource.m0.maxPoolPreparedStatementPerConnectionSize=20
#指定表smiler_user的分布情况，配置表在哪个数据库里面，表名称都是什么
spring.shardingsphere.sharding.tables.smiler_user.actual-data-nodes=m0.smiler_user_$->{1..2}

#指定smiler_user表里面主键id 生成策略 SNOWFLAKE，（实际使用了自定义的Id生成器，将不用这条配置）
#spring.shardingsphere.sharding.tables.smiler_user.key-generator.column=id
#spring.shardingsphere.sharding.tables.smiler_user.key-generator.type=SNOWFLAKE

# 指定分片策略 约定id值偶数添加到表smiler_user_1，如果id是奇数添加到表smiler_user_2
spring.shardingsphere.sharding.tables.smiler_user.table-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.tables.smiler_user.table-strategy.inline.algorithm-expression=smiler_user_$->{id.remainder(2).add(1)}
# 错误配置
#spring.shardingsphere.sharding.tables.smiler_user.table-strategy.inline.algorithm-expression=smiler_user_$->{id % 2 + 1}

# 打开SQL输出日志
spring.shardingsphere.props.sql.show=true

spring.redis.host=127.0.0.1
spring.redis.port=6379
spring.redis.database=3
spring.cache.type=redis
spring.cache.redis.time-to-live=6000000
spring.cache.redis.key-prefix=CACHE_
# 是否开启前缀功能
spring.cache.redis.use-key-prefix=true
# 是否缓存空值 防止缓存穿透
spring.cache.redis.cache-null-values=true

# rabbitMq配置
spring.rabbitmq.host=127.0.0.1
spring.rabbitmq.port=5672
spring.rabbitmq.virtual-host=/dev

# dubbo配置
dubbo.application.name=smiler-member
dubbo.protocol.port=20881
dubbo.registry.address=zookeeper://127.0.0.1:2181
dubbo.registry.client=zkclient

# kafka配置
spring.kafka.producer.bootstrap-servers=localhost:9092
spring.kafka.producer.retries=3

spring.kafka.consumer.bootstrap-servers=localhost:9092
# 用户推送搜索topic
smiler.user.index.topic=${spring.profiles.active}.smiler.user.index
smiler.king.user.index.topic=${spring.profiles.active}.smiler.king.user.index

# sentinel 配置
spring.cloud.sentinel.transport.dashboard=localhost:8333
spring.cloud.sentinel.transport.port=8719
management.endpoints.web.exposure.include=*
